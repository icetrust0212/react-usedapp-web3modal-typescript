{
  "address": "0x9Da418B0c5B41C1a2a3Bea87187deA99d768BCc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxBatchSize_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectionSize_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountForAuctionSale_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountForPresale_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountForDevs_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_DROP_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_DROP_PER_STEP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_END_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_START_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRE_SALE_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_SALE_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForAuctionSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "auctionSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentAuctionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPresaleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSalePhase",
      "outputs": [
        {
          "internalType": "enum Anero.SalePhase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAmountPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "preSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setPreSaleSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Anero.SalePhase",
          "name": "phase",
          "type": "uint8"
        }
      ],
      "name": "setSaleMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "startAuctionSaleAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "startPreSaleAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "startPublicSaleAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifySigner",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMoney",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5f6e2ecb697a23bf5a56e1732ff621f2f7b88668c509d30afe40b1261d9eb3e",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x9Da418B0c5B41C1a2a3Bea87187deA99d768BCc6",
    "transactionIndex": 80,
    "gasUsed": "3316009",
    "logsBloom": "0x
    "blockHash": "0xef3f2cc07b8da298218b2dc9f8a3abb8f4e3deafd9efaad606f4dfca8110911e",
    "transactionHash": "0xe5f6e2ecb697a23bf5a56e1732ff621f2f7b88668c509d30afe40b1261d9eb3e",
    "logs": [
      {
        "transactionIndex": 80,
        "blockNumber": 10638061,
        "transactionHash": "0xe5f6e2ecb697a23bf5a56e1732ff621f2f7b88668c509d30afe40b1261d9eb3e",
        "address": "0x9Da418B0c5B41C1a2a3Bea87187deA99d768BCc6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0xef3f2cc07b8da298218b2dc9f8a3abb8f4e3deafd9efaad606f4dfca8110911e"
      }
    ],
    "blockNumber": 10638061,
    "cumulativeGasUsed": "17584322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    7777,
    3000,
    2000,
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "b22addfa31bf1688ff376aa2ce9b944c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBatchSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuctionSale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForPresale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_DROP_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_DROP_PER_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_END_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_START_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForAuctionSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"auctionSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAuctionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPresaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSalePhase\",\"outputs\":[{\"internalType\":\"enum Anero.SalePhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"preSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setPreSaleSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Anero.SalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"setSaleMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"startAuctionSaleAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"startPreSaleAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"startPublicSaleAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifySigner\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"amountForAuctionSale_\":\"Amount for Dutch Auction mint\",\"amountForDevs_\":\"Amount for Presale mint\",\"amountForPresale_\":\"Amount for Presale mint\",\"collectionSize_\":\"NFT collection size\",\"maxBatchSize_\":\"Max size for ERC721A batch mint.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Anero.sol\":\"Anero\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Anero.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**************************************************\\r\\n * Anero.sol\\r\\n *\\r\\n * Created for Anero by: Patrick\\r\\n * Audited by: Adnan, Jill\\r\\n * Refered from: Azuki, Ghost collection\\r\\n * Dutch Auction style inspired by: Azuki\\r\\n *\\r\\n * Special thanks goes to: Adnan, Jill\\r\\n ***************************************************\\r\\n */\\r\\n\\r\\n\\r\\ncontract Anero is Ownable, ERC721A, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    // Amount limit per wallet\\r\\n    uint256 public maxAmountPerWallet;\\r\\n\\r\\n    // Amount limit for auction\\r\\n    uint256 public amountForAuctionSale;\\r\\n    // Amount limit for presale (whitelist sale)\\r\\n    uint256 public amountForPresale;\\r\\n    // Amount for dev mint\\r\\n    uint256 public amountForDevs;\\r\\n\\r\\n    // Current minted amount for Dutch Auction\\r\\n    uint256 public currentAuctionAmount;\\r\\n    // Current minted amount for presale\\r\\n    uint256 public currentPresaleAmount;\\r\\n\\r\\n    // Details for Dutch auction sale\\r\\n    uint256 public constant AUCTION_START_PRICE = 1 ether;\\r\\n    uint256 public constant AUCTION_END_PRICE = 0.15 ether;\\r\\n    uint256 public constant AUCTION_DURATION = 20 minutes;\\r\\n    uint256 public constant AUCTION_DROP_INTERVAL = 5 minutes;\\r\\n    uint256 public constant AUCTION_DROP_PER_STEP =\\r\\n        (AUCTION_START_PRICE - AUCTION_END_PRICE) /\\r\\n            (AUCTION_DURATION / AUCTION_DROP_INTERVAL - 1);\\r\\n\\r\\n    // Start time for each mint types\\r\\n    uint256 public auctionSaleStartTime;\\r\\n    uint256 public publicSaleStartTime;\\r\\n    uint256 public preSaleStartTime;\\r\\n\\r\\n    // Price for presale and public sale\\r\\n    uint256 public constant PUBLIC_SALE_PRICE = 2 ether;\\r\\n    uint256 public constant PRE_SALE_PRICE = 1 ether;\\r\\n\\r\\n    // Signer for whitelist verification\\r\\n    address private preSaleSigner;\\r\\n\\r\\n    // metadata URI\\r\\n    string private _baseTokenURI=\\\"https://gateway.pinata.cloud/ipfs/QmchQb5AmN17JyLDMFimADLqvJ6o9iy3mJseDLQcwqxWcy/\\\";\\r\\n\\r\\n    bool public reveal;\\r\\n\\r\\n    enum SalePhase {\\r\\n        None,\\r\\n        AuctionSale,\\r\\n        PreSale,\\r\\n        PublicSale\\r\\n    }\\r\\n\\r\\n    // Current Sale phase\\r\\n    SalePhase public currentSalePhase = SalePhase.None;\\r\\n\\r\\n    /**\\r\\n        @param maxBatchSize_ Max size for ERC721A batch mint.\\r\\n        @param collectionSize_ NFT collection size\\r\\n        @param amountForAuctionSale_ Amount for Dutch Auction mint\\r\\n        @param amountForPresale_ Amount for Presale mint\\r\\n        @param amountForDevs_ Amount for Presale mint\\r\\n    */\\r\\n    constructor(\\r\\n        uint256 maxBatchSize_,\\r\\n        uint256 collectionSize_,\\r\\n        uint256 amountForAuctionSale_,\\r\\n        uint256 amountForPresale_,\\r\\n        uint256 amountForDevs_\\r\\n    ) ERC721A(\\\"Anero\\\", \\\"Anero\\\", maxBatchSize_, collectionSize_) {\\r\\n        require(amountForAuctionSale_ + amountForPresale_ <= collectionSize_, \\\"Invalid amounts\\\");\\r\\n\\r\\n        maxAmountPerWallet = maxBatchSize_;\\r\\n        amountForAuctionSale = amountForAuctionSale_;\\r\\n        amountForPresale = amountForPresale_;\\r\\n        amountForDevs = amountForDevs_;\\r\\n    }\\r\\n\\r\\n    modifier callerIsUser() {\\r\\n        require(tx.origin == msg.sender, \\\"The caller is another contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPublicSaleIsOn() {\\r\\n        require(\\r\\n                currentSalePhase == SalePhase.PublicSale &&\\r\\n                block.timestamp >= publicSaleStartTime,\\r\\n            \\\"Public sale is not started yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPreSaleOn() {\\r\\n        require(\\r\\n                currentSalePhase == SalePhase.PreSale &&\\r\\n                block.timestamp >= preSaleStartTime,\\r\\n            \\\"Presale is not started yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenAuctionSaleIsOn() {\\r\\n        require(currentSalePhase == SalePhase.AuctionSale, \\\"Dutch Auction is not activated.\\\");\\r\\n\\r\\n        require(\\r\\n                \\r\\n                block.timestamp >= auctionSaleStartTime,\\r\\n                \\\"Auction sale is not started yet\\\"\\r\\n        );\\r\\n\\r\\n        require(block.timestamp <= auctionSaleStartTime + AUCTION_DURATION, \\r\\n            \\\"Auction sale is finished.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setReveal(bool value) external onlyOwner {\\r\\n        reveal = value;\\r\\n    }\\r\\n\\r\\n    // Set sale mode\\r\\n    function setSaleMode(SalePhase phase) external onlyOwner {\\r\\n        require(\\r\\n            currentSalePhase != phase,\\r\\n            \\\"Already active.\\\"\\r\\n        );\\r\\n        currentSalePhase = phase;\\r\\n    }\\r\\n\\r\\n    function startAuctionSaleAt(uint256 startTime) external onlyOwner {\\r\\n        auctionSaleStartTime = startTime;\\r\\n    }\\r\\n\\r\\n    function startPreSaleAt(uint256 startTime) external onlyOwner {\\r\\n        preSaleStartTime = startTime;\\r\\n    }\\r\\n\\r\\n    function startPublicSaleAt(uint256 startTime) external onlyOwner {\\r\\n        publicSaleStartTime = startTime;\\r\\n    }\\r\\n\\r\\n    function endSale() external onlyOwner {\\r\\n        currentSalePhase = SalePhase.None;\\r\\n    }\\r\\n\\r\\n    function getAuctionPrice() public view returns (uint256) {\\r\\n        if (block.timestamp <= auctionSaleStartTime) {\\r\\n            return AUCTION_START_PRICE;\\r\\n        }\\r\\n        if (block.timestamp - auctionSaleStartTime >= AUCTION_DURATION) {\\r\\n            return AUCTION_END_PRICE;\\r\\n        } else {\\r\\n            uint256 steps = (block.timestamp - auctionSaleStartTime) /\\r\\n                AUCTION_DROP_INTERVAL;\\r\\n            return AUCTION_START_PRICE - (steps * AUCTION_DROP_PER_STEP);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Dutch Auction is public sale.\\r\\n    function auctionSaleMint(uint256 quantity)\\r\\n        external\\r\\n        payable\\r\\n        callerIsUser\\r\\n        whenAuctionSaleIsOn\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            currentAuctionAmount + quantity <= amountForAuctionSale, \\r\\n            \\\"Reached max auction sale supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberMinted(msg.sender) + quantity <= maxAmountPerWallet,\\r\\n            \\\"Exceeds limit\\\"\\r\\n        );\\r\\n        currentAuctionAmount ++;\\r\\n        _safeMint(msg.sender, quantity);\\r\\n\\r\\n        refundIfOver(getAuctionPrice() * quantity);\\r\\n    }\\r\\n\\r\\n    function preSaleMint(\\r\\n      uint256 quantity,\\r\\n      bytes calldata signature\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        callerIsUser\\r\\n        whenPreSaleOn\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            currentPresaleAmount + quantity <= amountForPresale, \\r\\n            \\\"Reached max presale supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberMinted(msg.sender) + quantity <= maxAmountPerWallet,\\r\\n            \\\"Exceeds limit\\\"\\r\\n        );\\r\\n\\r\\n        verifySigner(signature);\\r\\n\\r\\n        currentPresaleAmount ++;\\r\\n        _safeMint(msg.sender, quantity);\\r\\n\\r\\n        refundIfOver(PRE_SALE_PRICE * quantity);\\r\\n    }\\r\\n\\r\\n    function verifySigner(bytes calldata signature) \\r\\n        public view {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\r\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\r\\n        address receivedAddress = ECDSA.recover(message, signature);\\r\\n        require(receivedAddress != address(0) && receivedAddress == preSaleSigner);\\r\\n    }\\r\\n\\r\\n    function publicSaleMint(uint256 quantity)\\r\\n        external\\r\\n        payable\\r\\n        callerIsUser\\r\\n        whenPublicSaleIsOn\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            totalSupply() + quantity <= collectionSize,\\r\\n            \\\"reached max supply\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberMinted(msg.sender) + quantity <= maxAmountPerWallet,\\r\\n            \\\"Exceeds limit\\\"\\r\\n        );\\r\\n        _safeMint(msg.sender, quantity);\\r\\n        refundIfOver(PUBLIC_SALE_PRICE * quantity);\\r\\n    }\\r\\n\\r\\n    // For marketing etc.\\r\\n    function devMint(uint256 quantity) external onlyOwner {\\r\\n        require(\\r\\n            totalSupply() + quantity <= amountForDevs,\\r\\n            \\\"Exceeds dev mint amount.\\\"\\r\\n        );\\r\\n        require(\\r\\n            quantity % maxBatchSize == 0,\\r\\n            \\\"can only mint a multiple of the maxBatchSize\\\"\\r\\n        );\\r\\n\\r\\n        uint256 numChunks = quantity / maxBatchSize;\\r\\n\\r\\n        for (uint256 i = 0; i < numChunks; i++) {\\r\\n            _safeMint(msg.sender, maxBatchSize);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function refundIfOver(uint256 price) private {\\r\\n        require(msg.value >= price, \\\"Need to send more ETH.\\\");\\r\\n        if (msg.value > price) {\\r\\n            payable(msg.sender).transfer(msg.value - price);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (!reveal) {\\r\\n            return \\\"https://gateway.pinata.cloud/ipfs/QmQTFBL4DENFgqGU2VZPy4GZAj2MTmzDdsoDjrS46AkHxT\\\";\\r\\n        }\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function setPreSaleSigner(address signer) external onlyOwner {\\r\\n        preSaleSigner = signer;\\r\\n    }\\r\\n\\r\\n    // withdraw ether\\r\\n    function withdrawMoney() external onlyOwner nonReentrant {\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    // utility functions\\r\\n\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return ownershipOf(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d29394f657a574bbb8078660af711f10a4cbf7f53ee32507c1c30046d175eed\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n\\r\\n  uint256 internal immutable collectionSize;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   * `collectionSize_` refers to how many tokens are in the collection.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 collectionSize_\\r\\n  ) {\\r\\n    require(\\r\\n      collectionSize_ > 0,\\r\\n      \\\"ERC721A: collection must have a nonzero supply\\\"\\r\\n    );\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    collectionSize = collectionSize_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    uint256 numMintedSoFar = totalSupply();\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    address currOwnershipAddr = address(0);\\r\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n      TokenOwnership memory ownership = _ownerships[i];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        currOwnershipAddr = ownership.addr;\\r\\n      }\\r\\n      if (currOwnershipAddr == owner) {\\r\\n        if (tokenIdsIdx == index) {\\r\\n          return i;\\r\\n        }\\r\\n        tokenIdsIdx++;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    uint256 startTokenId = currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = updatedIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > collectionSize - 1) {\\r\\n      endIndex = collectionSize - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\",\"keccak256\":\"0xcacd0c4b4a39075d060e36de8c17cddb9a67bae270d7b8b62b9148ba286f3186\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60006001819055600855610140604052605160c081815290620039e760e039805162000034916014916020909101906200028f565b506015805461ff00191690553480156200004d57600080fd5b5060405162003a3838038062003a38833981016040819052620000709162000335565b60405180604001604052806005815260200164416e65726f60d81b81525060405180604001604052806005815260200164416e65726f60d81b8152508686620000c8620000c26200023b60201b60201c565b6200023f565b60008111620001355760405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20636f6c6c656374696f6e206d757374206861766520612060448201526d6e6f6e7a65726f20737570706c7960901b60648201526084015b60405180910390fd5b60008211620001975760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b60648201526084016200012c565b8351620001ac9060029060208701906200028f565b508251620001c29060039060208601906200028f565b5060a0919091526080525050600160095583620001e0838562000376565b1115620002225760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420616d6f756e747360881b60448201526064016200012c565b600a94909455600b91909155600c5550600d55620003da565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200029d906200039d565b90600052602060002090601f016020900481019282620002c157600085556200030c565b82601f10620002dc57805160ff19168380011785556200030c565b828001600101855582156200030c579182015b828111156200030c578251825591602001919060010190620002ef565b506200031a9291506200031e565b5090565b5b808211156200031a57600081556001016200031f565b600080600080600060a086880312156200034e57600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600082198211156200039857634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003b257607f821691505b60208210811415620003d457634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a0516135c462000423600039600081816111e00152818161126e015281816112a6015281816123350152818161235f0152612a3f01526000611b3801526135c46000f3fe6080604052600436106103505760003560e01c80636bb7b1d9116101c6578063b3ab66b0116100f7578063e25ac45911610095578063f2fde38b1161006f578063f2fde38b1461093f578063f53da97e1461095f578063fab2bf581461098b578063fbe1aa51146109a157600080fd5b8063e25ac459146108c0578063e75f0166146108d6578063e985e9c5146108f657600080fd5b8063c87b56dd116100d1578063c87b56dd1461084e578063caf8a6d11461086e578063d7224ba01461088a578063dc33e681146108a057600080fd5b8063b3ab66b014610805578063b88d4fde14610818578063bdee733d1461083857600080fd5b806397b9447d11610164578063a271e5251161013e578063a271e525146107ad578063a272284a146107c3578063a475b5dd146107d6578063ac446002146107f057600080fd5b806397b9447d1461074d5780639f1c9b051461076d578063a22cb4651461078d57600080fd5b80637a1c4a56116101a05780637a1c4a561461045b5780638da5cb5b146106cc5780639231ab2a146106ea57806395d89b411461073857600080fd5b80636bb7b1d91461068157806370a0823114610697578063715018a6146106b757600080fd5b806336db7129116102a05780634f6ccce71161023e57806359f369fe1161021857806359f369fe146106165780635cae01d31461062b5780636352211e14610641578063689e13951461066157600080fd5b80634f6ccce7146105c05780634f825234146105e057806355f804b3146105f657600080fd5b806342842e0e1161027a57806342842e0e1461055557806347785085146105755780634aaa96221461058b5780634bd25c6f146105ab57600080fd5b806336db71291461050a578063375a069a14610520578063380d831b1461054057600080fd5b806318160ddd1161030d578063278e25ed116102e7578063278e25ed146104975780632a3f300c146104b75780632e95536e146104d75780632f745c59146104ea57600080fd5b806318160ddd14610446578063193402bb1461045b57806323b872dd1461047757600080fd5b806301ffc9a71461035557806306d65af31461038a57806306fdde03146103ae57806307e89ec0146103d0578063081812fc146103ec578063095ea7b314610424575b600080fd5b34801561036157600080fd5b50610375610370366004612e29565b6109b7565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103a060125481565b604051908152602001610381565b3480156103ba57600080fd5b506103c3610a24565b6040516103819190612e9e565b3480156103dc57600080fd5b506103a0671bc16d674ec8000081565b3480156103f857600080fd5b5061040c610407366004612eb1565b610ab6565b6040516001600160a01b039091168152602001610381565b34801561043057600080fd5b5061044461043f366004612ee6565b610b46565b005b34801561045257600080fd5b506001546103a0565b34801561046757600080fd5b506103a0670de0b6b3a764000081565b34801561048357600080fd5b50610444610492366004612f10565b610c5e565b3480156104a357600080fd5b506104446104b2366004612f8e565b610c69565b3480156104c357600080fd5b506104446104d2366004612fe0565b610d5d565b6104446104e5366004612eb1565b610d9a565b3480156104f657600080fd5b506103a0610505366004612ee6565b610fd3565b34801561051657600080fd5b506103a0600a5481565b34801561052c57600080fd5b5061044461053b366004612eb1565b61114c565b34801561054c57600080fd5b506104446112dc565b34801561056157600080fd5b50610444610570366004612f10565b611313565b34801561058157600080fd5b506103a0600c5481565b34801561059757600080fd5b506104446105a6366004612eb1565b61132e565b3480156105b757600080fd5b506103a061135d565b3480156105cc57600080fd5b506103a06105db366004612eb1565b611417565b3480156105ec57600080fd5b506103a0600e5481565b34801561060257600080fd5b50610444610611366004612f8e565b611480565b34801561062257600080fd5b506103a06114b6565b34801561063757600080fd5b506103a061012c81565b34801561064d57600080fd5b5061040c61065c366004612eb1565b6114f7565b34801561066d57600080fd5b5061044461067c366004612ffb565b611509565b34801561068d57600080fd5b506103a060115481565b3480156106a357600080fd5b506103a06106b236600461301c565b6115ca565b3480156106c357600080fd5b5061044461165b565b3480156106d857600080fd5b506000546001600160a01b031661040c565b3480156106f657600080fd5b5061070a610705366004612eb1565b611691565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff169281019290925201610381565b34801561074457600080fd5b506103c36116ae565b34801561075957600080fd5b50610444610768366004612eb1565b6116bd565b34801561077957600080fd5b5061044461078836600461301c565b6116ec565b34801561079957600080fd5b506104446107a8366004613037565b611738565b3480156107b957600080fd5b506103a06104b081565b6104446107d136600461306a565b6117fd565b3480156107e257600080fd5b506015546103759060ff1681565b3480156107fc57600080fd5b50610444611999565b610444610813366004612eb1565b611a76565b34801561082457600080fd5b506104446108333660046130cc565b611c02565b34801561084457600080fd5b506103a0600f5481565b34801561085a57600080fd5b506103c3610869366004612eb1565b611c3b565b34801561087a57600080fd5b506103a0670214e8348c4f000081565b34801561089657600080fd5b506103a060085481565b3480156108ac57600080fd5b506103a06108bb36600461301c565b611d31565b3480156108cc57600080fd5b506103a0600b5481565b3480156108e257600080fd5b506104446108f1366004612eb1565b611d3c565b34801561090257600080fd5b506103756109113660046131a8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561094b57600080fd5b5061044461095a36600461301c565b611d6b565b34801561096b57600080fd5b5060155461097e90610100900460ff1681565b60405161038191906131e8565b34801561099757600080fd5b506103a060105481565b3480156109ad57600080fd5b506103a0600d5481565b60006001600160e01b031982166380ac58cd60e01b14806109e857506001600160e01b03198216635b5e139f60e01b145b80610a0357506001600160e01b0319821663780e9d6360e01b145b80610a1e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610a3390613210565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5f90613210565b8015610aac5780601f10610a8157610100808354040283529160200191610aac565b820191906000526020600020905b815481529060010190602001808311610a8f57829003601f168201915b5050505050905090565b6000610ac3826001541190565b610b2a5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b51826114f7565b9050806001600160a01b0316836001600160a01b03161415610bc05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610b21565b336001600160a01b0382161480610bdc5750610bdc8133610911565b610c4e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610b21565b610c59838383611e06565b505050565b610c59838383611e62565b604080513360601b6bffffffffffffffffffffffff1916602080830191909152825160148184030181526034830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006054840152607080840182905284518085039091018152609090930190935281519101206000610d268286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121ea92505050565b90506001600160a01b03811615801590610d4d57506013546001600160a01b038281169116145b610d5657600080fd5b5050505050565b6000546001600160a01b03163314610d875760405162461bcd60e51b8152600401610b219061324b565b6015805460ff1916911515919091179055565b323314610db95760405162461bcd60e51b8152600401610b2190613280565b6001601554610100900460ff166003811115610dd757610dd76131d2565b14610e245760405162461bcd60e51b815260206004820152601f60248201527f44757463682041756374696f6e206973206e6f74206163746976617465642e006044820152606401610b21565b601054421015610e765760405162461bcd60e51b815260206004820152601f60248201527f41756374696f6e2073616c65206973206e6f74207374617274656420796574006044820152606401610b21565b6104b0601054610e8691906132cd565b421115610ed55760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e2073616c652069732066696e69736865642e000000000000006044820152606401610b21565b60026009541415610ef85760405162461bcd60e51b8152600401610b21906132e5565b6002600955600b54600e54610f0e9083906132cd565b1115610f5c5760405162461bcd60e51b815260206004820181905260248201527f52656163686564206d61782061756374696f6e2073616c6520737570706c792e6044820152606401610b21565b600a5481610f6933611d31565b610f7391906132cd565b1115610f915760405162461bcd60e51b8152600401610b219061331c565b600e8054906000610fa183613343565b9190505550610fb0338261220e565b610fcb81610fbc61135d565b610fc6919061335e565b61222c565b506001600955565b6000610fde836115ca565b82106110375760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610b21565b600061104260015490565b905060008060005b838110156110ec576000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff16918301919091521561109d57805192505b876001600160a01b0316836001600160a01b031614156110d957868414156110cb57509350610a1e92505050565b836110d581613343565b9450505b50806110e481613343565b91505061104a565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610b21565b6000546001600160a01b031633146111765760405162461bcd60e51b8152600401610b219061324b565b600d548161118360015490565b61118d91906132cd565b11156111db5760405162461bcd60e51b815260206004820152601860248201527f4578636565647320646576206d696e7420616d6f756e742e00000000000000006044820152606401610b21565b6112057f000000000000000000000000000000000000000000000000000000000000000082613393565b156112675760405162461bcd60e51b815260206004820152602c60248201527f63616e206f6e6c79206d696e742061206d756c7469706c65206f66207468652060448201526b6d6178426174636853697a6560a01b6064820152608401610b21565b60006112937f0000000000000000000000000000000000000000000000000000000000000000836133a7565b905060005b81811015610c59576112ca337f000000000000000000000000000000000000000000000000000000000000000061220e565b806112d481613343565b915050611298565b6000546001600160a01b031633146113065760405162461bcd60e51b8152600401610b219061324b565b6015805461ff0019169055565b610c5983838360405180602001604052806000815250611c02565b6000546001600160a01b031633146113585760405162461bcd60e51b8152600401610b219061324b565b601055565b600060105442116113755750670de0b6b3a764000090565b6104b06010544261138691906133bb565b106113985750670214e8348c4f000090565b600061012c601054426113ab91906133bb565b6113b591906133a7565b905060016113c761012c6104b06133a7565b6113d191906133bb565b6113eb670214e8348c4f0000670de0b6b3a76400006133bb565b6113f591906133a7565b6113ff908261335e565b61141190670de0b6b3a76400006133bb565b91505090565b600061142260015490565b821061147c5760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610b21565b5090565b6000546001600160a01b031633146114aa5760405162461bcd60e51b8152600401610b219061324b565b610c5960148383612d83565b60016114c661012c6104b06133a7565b6114d091906133bb565b6114ea670214e8348c4f0000670de0b6b3a76400006133bb565b6114f491906133a7565b81565b6000611502826122b3565b5192915050565b6000546001600160a01b031633146115335760405162461bcd60e51b8152600401610b219061324b565b806003811115611545576115456131d2565b601554610100900460ff166003811115611561576115616131d2565b14156115a15760405162461bcd60e51b815260206004820152600f60248201526e20b63932b0b23c9030b1ba34bb329760891b6044820152606401610b21565b6015805482919061ff0019166101008360038111156115c2576115c26131d2565b021790555050565b60006001600160a01b0382166116365760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610b21565b506001600160a01b03166000908152600560205260409020546001600160801b031690565b6000546001600160a01b031633146116855760405162461bcd60e51b8152600401610b219061324b565b61168f600061245d565b565b6040805180820190915260008082526020820152610a1e826122b3565b606060038054610a3390613210565b6000546001600160a01b031633146116e75760405162461bcd60e51b8152600401610b219061324b565b601255565b6000546001600160a01b031633146117165760405162461bcd60e51b8152600401610b219061324b565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382163314156117915760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610b21565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b32331461181c5760405162461bcd60e51b8152600401610b2190613280565b6002601554610100900460ff16600381111561183a5761183a6131d2565b14801561184957506012544210155b6118955760405162461bcd60e51b815260206004820152601a60248201527f50726573616c65206973206e6f742073746172746564207965740000000000006044820152606401610b21565b600260095414156118b85760405162461bcd60e51b8152600401610b21906132e5565b6002600955600c54600f546118ce9085906132cd565b111561191c5760405162461bcd60e51b815260206004820152601b60248201527f52656163686564206d61782070726573616c6520737570706c792e00000000006044820152606401610b21565b600a548361192933611d31565b61193391906132cd565b11156119515760405162461bcd60e51b8152600401610b219061331c565b61195b8282610c69565b600f805490600061196b83613343565b919050555061197a338461220e565b61198f610fc684670de0b6b3a764000061335e565b5050600160095550565b6000546001600160a01b031633146119c35760405162461bcd60e51b8152600401610b219061324b565b600260095414156119e65760405162461bcd60e51b8152600401610b21906132e5565b6002600955604051600090339047908381818185875af1925050503d8060008114611a2d576040519150601f19603f3d011682016040523d82523d6000602084013e611a32565b606091505b5050905080610fcb5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b21565b323314611a955760405162461bcd60e51b8152600401610b2190613280565b6003601554610100900460ff166003811115611ab357611ab36131d2565b148015611ac257506011544210155b611b0e5760405162461bcd60e51b815260206004820152601e60248201527f5075626c69632073616c65206973206e6f7420737461727465642079657400006044820152606401610b21565b60026009541415611b315760405162461bcd60e51b8152600401610b21906132e5565b60026009557f000000000000000000000000000000000000000000000000000000000000000081611b6160015490565b611b6b91906132cd565b1115611bae5760405162461bcd60e51b815260206004820152601260248201527172656163686564206d617820737570706c7960701b6044820152606401610b21565b600a5481611bbb33611d31565b611bc591906132cd565b1115611be35760405162461bcd60e51b8152600401610b219061331c565b611bed338261220e565b610fcb610fc682671bc16d674ec8000061335e565b611c0d848484611e62565b611c19848484846124ad565b611c355760405162461bcd60e51b8152600401610b21906133d2565b50505050565b6060611c48826001541190565b611cac5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b21565b60155460ff16611cd55760405180608001604052806050815260200161353f6050913992915050565b6000611cdf6125ac565b90506000815111611cff5760405180602001604052806000815250611d2a565b80611d09846125bb565b604051602001611d1a929190613425565b6040516020818303038152906040525b9392505050565b6000610a1e826126b9565b6000546001600160a01b03163314611d665760405162461bcd60e51b8152600401610b219061324b565b601155565b6000546001600160a01b03163314611d955760405162461bcd60e51b8152600401610b219061324b565b6001600160a01b038116611dfa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b21565b611e038161245d565b50565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611e6d826122b3565b80519091506000906001600160a01b0316336001600160a01b03161480611ea4575033611e9984610ab6565b6001600160a01b0316145b80611eb657508151611eb69033610911565b905080611f205760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610b21565b846001600160a01b031682600001516001600160a01b031614611f945760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610b21565b6001600160a01b038416611ff85760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610b21565b6120086000848460000151611e06565b6001600160a01b038516600090815260056020526040812080546001929061203a9084906001600160801b0316613464565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038616600090815260056020526040812080546001945090926120869185911661348c565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526004909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561210e8460016132cd565b6000818152600460205260409020549091506001600160a01b03166121a057612138816001541190565b156121a05760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600490935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b60008060006121f98585612757565b91509150612206816127c7565b509392505050565b612228828260405180602001604052806000815250612982565b5050565b803410156122755760405162461bcd60e51b81526020600482015260166024820152752732b2b2103a379039b2b7321036b7b9329022aa241760511b6044820152606401610b21565b80341115611e0357336108fc61228b83346133bb565b6040518115909202916000818181858888f19350505050158015612228573d6000803e3d6000fd5b60408051808201909152600080825260208201526122d2826001541190565b6123315760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610b21565b60007f00000000000000000000000000000000000000000000000000000000000000008310612392576123847f0000000000000000000000000000000000000000000000000000000000000000846133bb565b61238f9060016132cd565b90505b825b8181106123fc576000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156123e957949350505050565b50806123f4816134b7565b915050612394565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610b21565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0384163b156125a057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124f19033908990889088906004016134ce565b6020604051808303816000875af192505050801561252c575060408051601f3d908101601f191682019092526125299181019061350b565b60015b612586573d80801561255a576040519150601f19603f3d011682016040523d82523d6000602084013e61255f565b606091505b50805161257e5760405162461bcd60e51b8152600401610b21906133d2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125a4565b5060015b949350505050565b606060148054610a3390613210565b6060816125df5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561260957806125f381613343565b91506126029050600a836133a7565b91506125e3565b60008167ffffffffffffffff811115612624576126246130b6565b6040519080825280601f01601f19166020018201604052801561264e576020820181803683370190505b5090505b84156125a4576126636001836133bb565b9150612670600a86613393565b61267b9060306132cd565b60f81b81838151811061269057612690613528565b60200101906001600160f81b031916908160001a9053506126b2600a866133a7565b9450612652565b60006001600160a01b03821661272b5760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b6064820152608401610b21565b506001600160a01b0316600090815260056020526040902054600160801b90046001600160801b031690565b60008082516041141561278e5760208301516040840151606085015160001a61278287828585612c5d565b945094505050506127c0565b8251604014156127b857602083015160408401516127ad868383612d4a565b9350935050506127c0565b506000905060025b9250929050565b60008160048111156127db576127db6131d2565b14156127e45750565b60018160048111156127f8576127f86131d2565b14156128465760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b21565b600281600481111561285a5761285a6131d2565b14156128a85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b21565b60038160048111156128bc576128bc6131d2565b14156129155760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b21565b6004816004811115612929576129296131d2565b1415611e035760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610b21565b6001546001600160a01b0384166129e55760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b21565b6129f0816001541190565b15612a3d5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610b21565b7f0000000000000000000000000000000000000000000000000000000000000000831115612ab85760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610b21565b6001600160a01b0384166000908152600560209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612b1490879061348c565b6001600160801b03168152602001858360200151612b32919061348c565b6001600160801b039081169091526001600160a01b0380881660008181526005602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526004909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b85811015612c525760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612c1660008884886124ad565b612c325760405162461bcd60e51b8152600401610b21906133d2565b81612c3c81613343565b9250508080612c4a90613343565b915050612bc9565b5060018190556121e2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c945750600090506003612d41565b8460ff16601b14158015612cac57508460ff16601c14155b15612cbd5750600090506004612d41565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d11573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d3a57600060019250925050612d41565b9150600090505b94509492505050565b6000806001600160ff1b03831681612d6760ff86901c601b6132cd565b9050612d7587828885612c5d565b935093505050935093915050565b828054612d8f90613210565b90600052602060002090601f016020900481019282612db15760008555612df7565b82601f10612dca5782800160ff19823516178555612df7565b82800160010185558215612df7579182015b82811115612df7578235825591602001919060010190612ddc565b5061147c9291505b8082111561147c5760008155600101612dff565b6001600160e01b031981168114611e0357600080fd5b600060208284031215612e3b57600080fd5b8135611d2a81612e13565b60005b83811015612e61578181015183820152602001612e49565b83811115611c355750506000910152565b60008151808452612e8a816020860160208601612e46565b601f01601f19169290920160200192915050565b602081526000611d2a6020830184612e72565b600060208284031215612ec357600080fd5b5035919050565b80356001600160a01b0381168114612ee157600080fd5b919050565b60008060408385031215612ef957600080fd5b612f0283612eca565b946020939093013593505050565b600080600060608486031215612f2557600080fd5b612f2e84612eca565b9250612f3c60208501612eca565b9150604084013590509250925092565b60008083601f840112612f5e57600080fd5b50813567ffffffffffffffff811115612f7657600080fd5b6020830191508360208285010111156127c057600080fd5b60008060208385031215612fa157600080fd5b823567ffffffffffffffff811115612fb857600080fd5b612fc485828601612f4c565b90969095509350505050565b80358015158114612ee157600080fd5b600060208284031215612ff257600080fd5b611d2a82612fd0565b60006020828403121561300d57600080fd5b813560048110611d2a57600080fd5b60006020828403121561302e57600080fd5b611d2a82612eca565b6000806040838503121561304a57600080fd5b61305383612eca565b915061306160208401612fd0565b90509250929050565b60008060006040848603121561307f57600080fd5b83359250602084013567ffffffffffffffff81111561309d57600080fd5b6130a986828701612f4c565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156130e257600080fd5b6130eb85612eca565b93506130f960208601612eca565b925060408501359150606085013567ffffffffffffffff8082111561311d57600080fd5b818701915087601f83011261313157600080fd5b813581811115613143576131436130b6565b604051601f8201601f19908116603f0116810190838211818310171561316b5761316b6130b6565b816040528281528a602084870101111561318457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156131bb57600080fd5b6131c483612eca565b915061306160208401612eca565b634e487b7160e01b600052602160045260246000fd5b602081016004831061320a57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061322457607f821691505b6020821081141561324557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f5468652063616c6c657220697320616e6f7468657220636f6e74726163740000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156132e0576132e06132b7565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600d908201526c115e18d959591cc81b1a5b5a5d609a1b604082015260600190565b6000600019821415613357576133576132b7565b5060010190565b6000816000190483118215151615613378576133786132b7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826133a2576133a261337d565b500690565b6000826133b6576133b661337d565b500490565b6000828210156133cd576133cd6132b7565b500390565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008351613437818460208801612e46565b83519083019061344b818360208801612e46565b64173539b7b760d91b9101908152600501949350505050565b60006001600160801b0383811690831681811015613484576134846132b7565b039392505050565b60006001600160801b038083168185168083038211156134ae576134ae6132b7565b01949350505050565b6000816134c6576134c66132b7565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061350190830184612e72565b9695505050505050565b60006020828403121561351d57600080fd5b8151611d2a81612e13565b634e487b7160e01b600052603260045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d515446424c3444454e466771475532565a507934475a416a324d546d7a4464736f446a72533436416b487854a2646970667358221220353515c08662b9086a0e6be86cd0da42985918fbc8b703cfcfac0d5074bc7dfd64736f6c634300080a003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6368516235416d4e31374a794c444d46696d41444c71764a366f396979336d4a7365444c51637771785763792f",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c80636bb7b1d9116101c6578063b3ab66b0116100f7578063e25ac45911610095578063f2fde38b1161006f578063f2fde38b1461093f578063f53da97e1461095f578063fab2bf581461098b578063fbe1aa51146109a157600080fd5b8063e25ac459146108c0578063e75f0166146108d6578063e985e9c5146108f657600080fd5b8063c87b56dd116100d1578063c87b56dd1461084e578063caf8a6d11461086e578063d7224ba01461088a578063dc33e681146108a057600080fd5b8063b3ab66b014610805578063b88d4fde14610818578063bdee733d1461083857600080fd5b806397b9447d11610164578063a271e5251161013e578063a271e525146107ad578063a272284a146107c3578063a475b5dd146107d6578063ac446002146107f057600080fd5b806397b9447d1461074d5780639f1c9b051461076d578063a22cb4651461078d57600080fd5b80637a1c4a56116101a05780637a1c4a561461045b5780638da5cb5b146106cc5780639231ab2a146106ea57806395d89b411461073857600080fd5b80636bb7b1d91461068157806370a0823114610697578063715018a6146106b757600080fd5b806336db7129116102a05780634f6ccce71161023e57806359f369fe1161021857806359f369fe146106165780635cae01d31461062b5780636352211e14610641578063689e13951461066157600080fd5b80634f6ccce7146105c05780634f825234146105e057806355f804b3146105f657600080fd5b806342842e0e1161027a57806342842e0e1461055557806347785085146105755780634aaa96221461058b5780634bd25c6f146105ab57600080fd5b806336db71291461050a578063375a069a14610520578063380d831b1461054057600080fd5b806318160ddd1161030d578063278e25ed116102e7578063278e25ed146104975780632a3f300c146104b75780632e95536e146104d75780632f745c59146104ea57600080fd5b806318160ddd14610446578063193402bb1461045b57806323b872dd1461047757600080fd5b806301ffc9a71461035557806306d65af31461038a57806306fdde03146103ae57806307e89ec0146103d0578063081812fc146103ec578063095ea7b314610424575b600080fd5b34801561036157600080fd5b50610375610370366004612e29565b6109b7565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103a060125481565b604051908152602001610381565b3480156103ba57600080fd5b506103c3610a24565b6040516103819190612e9e565b3480156103dc57600080fd5b506103a0671bc16d674ec8000081565b3480156103f857600080fd5b5061040c610407366004612eb1565b610ab6565b6040516001600160a01b039091168152602001610381565b34801561043057600080fd5b5061044461043f366004612ee6565b610b46565b005b34801561045257600080fd5b506001546103a0565b34801561046757600080fd5b506103a0670de0b6b3a764000081565b34801561048357600080fd5b50610444610492366004612f10565b610c5e565b3480156104a357600080fd5b506104446104b2366004612f8e565b610c69565b3480156104c357600080fd5b506104446104d2366004612fe0565b610d5d565b6104446104e5366004612eb1565b610d9a565b3480156104f657600080fd5b506103a0610505366004612ee6565b610fd3565b34801561051657600080fd5b506103a0600a5481565b34801561052c57600080fd5b5061044461053b366004612eb1565b61114c565b34801561054c57600080fd5b506104446112dc565b34801561056157600080fd5b50610444610570366004612f10565b611313565b34801561058157600080fd5b506103a0600c5481565b34801561059757600080fd5b506104446105a6366004612eb1565b61132e565b3480156105b757600080fd5b506103a061135d565b3480156105cc57600080fd5b506103a06105db366004612eb1565b611417565b3480156105ec57600080fd5b506103a0600e5481565b34801561060257600080fd5b50610444610611366004612f8e565b611480565b34801561062257600080fd5b506103a06114b6565b34801561063757600080fd5b506103a061012c81565b34801561064d57600080fd5b5061040c61065c366004612eb1565b6114f7565b34801561066d57600080fd5b5061044461067c366004612ffb565b611509565b34801561068d57600080fd5b506103a060115481565b3480156106a357600080fd5b506103a06106b236600461301c565b6115ca565b3480156106c357600080fd5b5061044461165b565b3480156106d857600080fd5b506000546001600160a01b031661040c565b3480156106f657600080fd5b5061070a610705366004612eb1565b611691565b6040805182516001600160a01b0316815260209283015167ffffffffffffffff169281019290925201610381565b34801561074457600080fd5b506103c36116ae565b34801561075957600080fd5b50610444610768366004612eb1565b6116bd565b34801561077957600080fd5b5061044461078836600461301c565b6116ec565b34801561079957600080fd5b506104446107a8366004613037565b611738565b3480156107b957600080fd5b506103a06104b081565b6104446107d136600461306a565b6117fd565b3480156107e257600080fd5b506015546103759060ff1681565b3480156107fc57600080fd5b50610444611999565b610444610813366004612eb1565b611a76565b34801561082457600080fd5b506104446108333660046130cc565b611c02565b34801561084457600080fd5b506103a0600f5481565b34801561085a57600080fd5b506103c3610869366004612eb1565b611c3b565b34801561087a57600080fd5b506103a0670214e8348c4f000081565b34801561089657600080fd5b506103a060085481565b3480156108ac57600080fd5b506103a06108bb36600461301c565b611d31565b3480156108cc57600080fd5b506103a0600b5481565b3480156108e257600080fd5b506104446108f1366004612eb1565b611d3c565b34801561090257600080fd5b506103756109113660046131a8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561094b57600080fd5b5061044461095a36600461301c565b611d6b565b34801561096b57600080fd5b5060155461097e90610100900460ff1681565b60405161038191906131e8565b34801561099757600080fd5b506103a060105481565b3480156109ad57600080fd5b506103a0600d5481565b60006001600160e01b031982166380ac58cd60e01b14806109e857506001600160e01b03198216635b5e139f60e01b145b80610a0357506001600160e01b0319821663780e9d6360e01b145b80610a1e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610a3390613210565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5f90613210565b8015610aac5780601f10610a8157610100808354040283529160200191610aac565b820191906000526020600020905b815481529060010190602001808311610a8f57829003601f168201915b5050505050905090565b6000610ac3826001541190565b610b2a5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b51826114f7565b9050806001600160a01b0316836001600160a01b03161415610bc05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610b21565b336001600160a01b0382161480610bdc5750610bdc8133610911565b610c4e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610b21565b610c59838383611e06565b505050565b610c59838383611e62565b604080513360601b6bffffffffffffffffffffffff1916602080830191909152825160148184030181526034830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006054840152607080840182905284518085039091018152609090930190935281519101206000610d268286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121ea92505050565b90506001600160a01b03811615801590610d4d57506013546001600160a01b038281169116145b610d5657600080fd5b5050505050565b6000546001600160a01b03163314610d875760405162461bcd60e51b8152600401610b219061324b565b6015805460ff1916911515919091179055565b323314610db95760405162461bcd60e51b8152600401610b2190613280565b6001601554610100900460ff166003811115610dd757610dd76131d2565b14610e245760405162461bcd60e51b815260206004820152601f60248201527f44757463682041756374696f6e206973206e6f74206163746976617465642e006044820152606401610b21565b601054421015610e765760405162461bcd60e51b815260206004820152601f60248201527f41756374696f6e2073616c65206973206e6f74207374617274656420796574006044820152606401610b21565b6104b0601054610e8691906132cd565b421115610ed55760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e2073616c652069732066696e69736865642e000000000000006044820152606401610b21565b60026009541415610ef85760405162461bcd60e51b8152600401610b21906132e5565b6002600955600b54600e54610f0e9083906132cd565b1115610f5c5760405162461bcd60e51b815260206004820181905260248201527f52656163686564206d61782061756374696f6e2073616c6520737570706c792e6044820152606401610b21565b600a5481610f6933611d31565b610f7391906132cd565b1115610f915760405162461bcd60e51b8152600401610b219061331c565b600e8054906000610fa183613343565b9190505550610fb0338261220e565b610fcb81610fbc61135d565b610fc6919061335e565b61222c565b506001600955565b6000610fde836115ca565b82106110375760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610b21565b600061104260015490565b905060008060005b838110156110ec576000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff16918301919091521561109d57805192505b876001600160a01b0316836001600160a01b031614156110d957868414156110cb57509350610a1e92505050565b836110d581613343565b9450505b50806110e481613343565b91505061104a565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610b21565b6000546001600160a01b031633146111765760405162461bcd60e51b8152600401610b219061324b565b600d548161118360015490565b61118d91906132cd565b11156111db5760405162461bcd60e51b815260206004820152601860248201527f4578636565647320646576206d696e7420616d6f756e742e00000000000000006044820152606401610b21565b6112057f000000000000000000000000000000000000000000000000000000000000000082613393565b156112675760405162461bcd60e51b815260206004820152602c60248201527f63616e206f6e6c79206d696e742061206d756c7469706c65206f66207468652060448201526b6d6178426174636853697a6560a01b6064820152608401610b21565b60006112937f0000000000000000000000000000000000000000000000000000000000000000836133a7565b905060005b81811015610c59576112ca337f000000000000000000000000000000000000000000000000000000000000000061220e565b806112d481613343565b915050611298565b6000546001600160a01b031633146113065760405162461bcd60e51b8152600401610b219061324b565b6015805461ff0019169055565b610c5983838360405180602001604052806000815250611c02565b6000546001600160a01b031633146113585760405162461bcd60e51b8152600401610b219061324b565b601055565b600060105442116113755750670de0b6b3a764000090565b6104b06010544261138691906133bb565b106113985750670214e8348c4f000090565b600061012c601054426113ab91906133bb565b6113b591906133a7565b905060016113c761012c6104b06133a7565b6113d191906133bb565b6113eb670214e8348c4f0000670de0b6b3a76400006133bb565b6113f591906133a7565b6113ff908261335e565b61141190670de0b6b3a76400006133bb565b91505090565b600061142260015490565b821061147c5760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610b21565b5090565b6000546001600160a01b031633146114aa5760405162461bcd60e51b8152600401610b219061324b565b610c5960148383612d83565b60016114c661012c6104b06133a7565b6114d091906133bb565b6114ea670214e8348c4f0000670de0b6b3a76400006133bb565b6114f491906133a7565b81565b6000611502826122b3565b5192915050565b6000546001600160a01b031633146115335760405162461bcd60e51b8152600401610b219061324b565b806003811115611545576115456131d2565b601554610100900460ff166003811115611561576115616131d2565b14156115a15760405162461bcd60e51b815260206004820152600f60248201526e20b63932b0b23c9030b1ba34bb329760891b6044820152606401610b21565b6015805482919061ff0019166101008360038111156115c2576115c26131d2565b021790555050565b60006001600160a01b0382166116365760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610b21565b506001600160a01b03166000908152600560205260409020546001600160801b031690565b6000546001600160a01b031633146116855760405162461bcd60e51b8152600401610b219061324b565b61168f600061245d565b565b6040805180820190915260008082526020820152610a1e826122b3565b606060038054610a3390613210565b6000546001600160a01b031633146116e75760405162461bcd60e51b8152600401610b219061324b565b601255565b6000546001600160a01b031633146117165760405162461bcd60e51b8152600401610b219061324b565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382163314156117915760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610b21565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b32331461181c5760405162461bcd60e51b8152600401610b2190613280565b6002601554610100900460ff16600381111561183a5761183a6131d2565b14801561184957506012544210155b6118955760405162461bcd60e51b815260206004820152601a60248201527f50726573616c65206973206e6f742073746172746564207965740000000000006044820152606401610b21565b600260095414156118b85760405162461bcd60e51b8152600401610b21906132e5565b6002600955600c54600f546118ce9085906132cd565b111561191c5760405162461bcd60e51b815260206004820152601b60248201527f52656163686564206d61782070726573616c6520737570706c792e00000000006044820152606401610b21565b600a548361192933611d31565b61193391906132cd565b11156119515760405162461bcd60e51b8152600401610b219061331c565b61195b8282610c69565b600f805490600061196b83613343565b919050555061197a338461220e565b61198f610fc684670de0b6b3a764000061335e565b5050600160095550565b6000546001600160a01b031633146119c35760405162461bcd60e51b8152600401610b219061324b565b600260095414156119e65760405162461bcd60e51b8152600401610b21906132e5565b6002600955604051600090339047908381818185875af1925050503d8060008114611a2d576040519150601f19603f3d011682016040523d82523d6000602084013e611a32565b606091505b5050905080610fcb5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b21565b323314611a955760405162461bcd60e51b8152600401610b2190613280565b6003601554610100900460ff166003811115611ab357611ab36131d2565b148015611ac257506011544210155b611b0e5760405162461bcd60e51b815260206004820152601e60248201527f5075626c69632073616c65206973206e6f7420737461727465642079657400006044820152606401610b21565b60026009541415611b315760405162461bcd60e51b8152600401610b21906132e5565b60026009557f000000000000000000000000000000000000000000000000000000000000000081611b6160015490565b611b6b91906132cd565b1115611bae5760405162461bcd60e51b815260206004820152601260248201527172656163686564206d617820737570706c7960701b6044820152606401610b21565b600a5481611bbb33611d31565b611bc591906132cd565b1115611be35760405162461bcd60e51b8152600401610b219061331c565b611bed338261220e565b610fcb610fc682671bc16d674ec8000061335e565b611c0d848484611e62565b611c19848484846124ad565b611c355760405162461bcd60e51b8152600401610b21906133d2565b50505050565b6060611c48826001541190565b611cac5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b21565b60155460ff16611cd55760405180608001604052806050815260200161353f6050913992915050565b6000611cdf6125ac565b90506000815111611cff5760405180602001604052806000815250611d2a565b80611d09846125bb565b604051602001611d1a929190613425565b6040516020818303038152906040525b9392505050565b6000610a1e826126b9565b6000546001600160a01b03163314611d665760405162461bcd60e51b8152600401610b219061324b565b601155565b6000546001600160a01b03163314611d955760405162461bcd60e51b8152600401610b219061324b565b6001600160a01b038116611dfa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b21565b611e038161245d565b50565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611e6d826122b3565b80519091506000906001600160a01b0316336001600160a01b03161480611ea4575033611e9984610ab6565b6001600160a01b0316145b80611eb657508151611eb69033610911565b905080611f205760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610b21565b846001600160a01b031682600001516001600160a01b031614611f945760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610b21565b6001600160a01b038416611ff85760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610b21565b6120086000848460000151611e06565b6001600160a01b038516600090815260056020526040812080546001929061203a9084906001600160801b0316613464565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038616600090815260056020526040812080546001945090926120869185911661348c565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526004909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561210e8460016132cd565b6000818152600460205260409020549091506001600160a01b03166121a057612138816001541190565b156121a05760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600490935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b60008060006121f98585612757565b91509150612206816127c7565b509392505050565b612228828260405180602001604052806000815250612982565b5050565b803410156122755760405162461bcd60e51b81526020600482015260166024820152752732b2b2103a379039b2b7321036b7b9329022aa241760511b6044820152606401610b21565b80341115611e0357336108fc61228b83346133bb565b6040518115909202916000818181858888f19350505050158015612228573d6000803e3d6000fd5b60408051808201909152600080825260208201526122d2826001541190565b6123315760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610b21565b60007f00000000000000000000000000000000000000000000000000000000000000008310612392576123847f0000000000000000000000000000000000000000000000000000000000000000846133bb565b61238f9060016132cd565b90505b825b8181106123fc576000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156123e957949350505050565b50806123f4816134b7565b915050612394565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610b21565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0384163b156125a057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124f19033908990889088906004016134ce565b6020604051808303816000875af192505050801561252c575060408051601f3d908101601f191682019092526125299181019061350b565b60015b612586573d80801561255a576040519150601f19603f3d011682016040523d82523d6000602084013e61255f565b606091505b50805161257e5760405162461bcd60e51b8152600401610b21906133d2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125a4565b5060015b949350505050565b606060148054610a3390613210565b6060816125df5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561260957806125f381613343565b91506126029050600a836133a7565b91506125e3565b60008167ffffffffffffffff811115612624576126246130b6565b6040519080825280601f01601f19166020018201604052801561264e576020820181803683370190505b5090505b84156125a4576126636001836133bb565b9150612670600a86613393565b61267b9060306132cd565b60f81b81838151811061269057612690613528565b60200101906001600160f81b031916908160001a9053506126b2600a866133a7565b9450612652565b60006001600160a01b03821661272b5760405162461bcd60e51b815260206004820152603160248201527f455243373231413a206e756d626572206d696e74656420717565727920666f7260448201527020746865207a65726f206164647265737360781b6064820152608401610b21565b506001600160a01b0316600090815260056020526040902054600160801b90046001600160801b031690565b60008082516041141561278e5760208301516040840151606085015160001a61278287828585612c5d565b945094505050506127c0565b8251604014156127b857602083015160408401516127ad868383612d4a565b9350935050506127c0565b506000905060025b9250929050565b60008160048111156127db576127db6131d2565b14156127e45750565b60018160048111156127f8576127f86131d2565b14156128465760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b21565b600281600481111561285a5761285a6131d2565b14156128a85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b21565b60038160048111156128bc576128bc6131d2565b14156129155760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b21565b6004816004811115612929576129296131d2565b1415611e035760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610b21565b6001546001600160a01b0384166129e55760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b21565b6129f0816001541190565b15612a3d5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610b21565b7f0000000000000000000000000000000000000000000000000000000000000000831115612ab85760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610b21565b6001600160a01b0384166000908152600560209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612b1490879061348c565b6001600160801b03168152602001858360200151612b32919061348c565b6001600160801b039081169091526001600160a01b0380881660008181526005602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526004909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b85811015612c525760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612c1660008884886124ad565b612c325760405162461bcd60e51b8152600401610b21906133d2565b81612c3c81613343565b9250508080612c4a90613343565b915050612bc9565b5060018190556121e2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c945750600090506003612d41565b8460ff16601b14158015612cac57508460ff16601c14155b15612cbd5750600090506004612d41565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d11573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612d3a57600060019250925050612d41565b9150600090505b94509492505050565b6000806001600160ff1b03831681612d6760ff86901c601b6132cd565b9050612d7587828885612c5d565b935093505050935093915050565b828054612d8f90613210565b90600052602060002090601f016020900481019282612db15760008555612df7565b82601f10612dca5782800160ff19823516178555612df7565b82800160010185558215612df7579182015b82811115612df7578235825591602001919060010190612ddc565b5061147c9291505b8082111561147c5760008155600101612dff565b6001600160e01b031981168114611e0357600080fd5b600060208284031215612e3b57600080fd5b8135611d2a81612e13565b60005b83811015612e61578181015183820152602001612e49565b83811115611c355750506000910152565b60008151808452612e8a816020860160208601612e46565b601f01601f19169290920160200192915050565b602081526000611d2a6020830184612e72565b600060208284031215612ec357600080fd5b5035919050565b80356001600160a01b0381168114612ee157600080fd5b919050565b60008060408385031215612ef957600080fd5b612f0283612eca565b946020939093013593505050565b600080600060608486031215612f2557600080fd5b612f2e84612eca565b9250612f3c60208501612eca565b9150604084013590509250925092565b60008083601f840112612f5e57600080fd5b50813567ffffffffffffffff811115612f7657600080fd5b6020830191508360208285010111156127c057600080fd5b60008060208385031215612fa157600080fd5b823567ffffffffffffffff811115612fb857600080fd5b612fc485828601612f4c565b90969095509350505050565b80358015158114612ee157600080fd5b600060208284031215612ff257600080fd5b611d2a82612fd0565b60006020828403121561300d57600080fd5b813560048110611d2a57600080fd5b60006020828403121561302e57600080fd5b611d2a82612eca565b6000806040838503121561304a57600080fd5b61305383612eca565b915061306160208401612fd0565b90509250929050565b60008060006040848603121561307f57600080fd5b83359250602084013567ffffffffffffffff81111561309d57600080fd5b6130a986828701612f4c565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156130e257600080fd5b6130eb85612eca565b93506130f960208601612eca565b925060408501359150606085013567ffffffffffffffff8082111561311d57600080fd5b818701915087601f83011261313157600080fd5b813581811115613143576131436130b6565b604051601f8201601f19908116603f0116810190838211818310171561316b5761316b6130b6565b816040528281528a602084870101111561318457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156131bb57600080fd5b6131c483612eca565b915061306160208401612eca565b634e487b7160e01b600052602160045260246000fd5b602081016004831061320a57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061322457607f821691505b6020821081141561324557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f5468652063616c6c657220697320616e6f7468657220636f6e74726163740000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156132e0576132e06132b7565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600d908201526c115e18d959591cc81b1a5b5a5d609a1b604082015260600190565b6000600019821415613357576133576132b7565b5060010190565b6000816000190483118215151615613378576133786132b7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826133a2576133a261337d565b500690565b6000826133b6576133b661337d565b500490565b6000828210156133cd576133cd6132b7565b500390565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60008351613437818460208801612e46565b83519083019061344b818360208801612e46565b64173539b7b760d91b9101908152600501949350505050565b60006001600160801b0383811690831681811015613484576134846132b7565b039392505050565b60006001600160801b038083168185168083038211156134ae576134ae6132b7565b01949350505050565b6000816134c6576134c66132b7565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061350190830184612e72565b9695505050505050565b60006020828403121561351d57600080fd5b8151611d2a81612e13565b634e487b7160e01b600052603260045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d515446424c3444454e466771475532565a507934475a416a324d546d7a4464736f446a72533436416b487854a2646970667358221220353515c08662b9086a0e6be86cd0da42985918fbc8b703cfcfac0d5074bc7dfd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "amountForAuctionSale_": "Amount for Dutch Auction mint",
          "amountForDevs_": "Amount for Presale mint",
          "amountForPresale_": "Amount for Presale mint",
          "collectionSize_": "NFT collection size",
          "maxBatchSize_": "Max size for ERC721A batch mint."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2077,
        "contract": "contracts/Anero.sol:Anero",
        "label": "currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2083,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2085,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2090,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2069_storage)"
      },
      {
        "astId": 2095,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2074_storage)"
      },
      {
        "astId": 2099,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2105,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3048,
        "contract": "contracts/Anero.sol:Anero",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 115,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1319,
        "contract": "contracts/Anero.sol:Anero",
        "label": "maxAmountPerWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1321,
        "contract": "contracts/Anero.sol:Anero",
        "label": "amountForAuctionSale",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1323,
        "contract": "contracts/Anero.sol:Anero",
        "label": "amountForPresale",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1325,
        "contract": "contracts/Anero.sol:Anero",
        "label": "amountForDevs",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1327,
        "contract": "contracts/Anero.sol:Anero",
        "label": "currentAuctionAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1329,
        "contract": "contracts/Anero.sol:Anero",
        "label": "currentPresaleAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1356,
        "contract": "contracts/Anero.sol:Anero",
        "label": "auctionSaleStartTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1358,
        "contract": "contracts/Anero.sol:Anero",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1360,
        "contract": "contracts/Anero.sol:Anero",
        "label": "preSaleStartTime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1368,
        "contract": "contracts/Anero.sol:Anero",
        "label": "preSaleSigner",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 1371,
        "contract": "contracts/Anero.sol:Anero",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/Anero.sol:Anero",
        "label": "reveal",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 1383,
        "contract": "contracts/Anero.sol:Anero",
        "label": "currentSalePhase",
        "offset": 1,
        "slot": "21",
        "type": "t_enum(SalePhase)1378"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(SalePhase)1378": {
        "encoding": "inplace",
        "label": "enum Anero.SalePhase",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2074_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2074_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2069_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2069_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2074_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2071,
            "contract": "contracts/Anero.sol:Anero",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2073,
            "contract": "contracts/Anero.sol:Anero",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2069_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2066,
            "contract": "contracts/Anero.sol:Anero",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2068,
            "contract": "contracts/Anero.sol:Anero",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}